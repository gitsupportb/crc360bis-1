<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Espace Client - BCP Securities Services</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="/amlcenter/css/styles.css">
  <style>
    /* Match main dashboard styling exactly */
    .aml-header {
      background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
      color: white;
      padding: 15px 25px;
      border-radius: 15px;
      margin-bottom: 20px;
      box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);
    }

    .aml-logo {
      width: 40px;
      height: 40px;
      background: white;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 15px;
    }

    .section-card {
      background: white;
      border-radius: 10px;
      margin-bottom: 20px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      border: none;
    }

    .section-card .card-header {
      background: #f8f9fa;
      border-bottom: 1px solid #dee2e6;
      font-weight: 600;
      color: #333;
      padding: 15px 20px;
    }

    .section-card .card-body {
      padding: 20px;
    }

    .clean-table {
      margin: 0;
      border: none;
    }

    .clean-table th {
      background: #ff6b35;
      color: white;
      font-weight: 600;
      padding: 12px 15px;
      border: none;
      font-size: 0.9rem;
    }

    .clean-table td {
      padding: 12px 15px;
      border-bottom: 1px solid #f0f0f0;
      border-left: none;
      border-right: none;
      vertical-align: middle;
    }

    .clean-table tbody tr:hover {
      background: #f8f9fa;
    }

    .clean-table tbody tr:last-child td {
      border-bottom: none;
    }

    .status-badge {
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.85rem;
      font-weight: 500;
    }

    .badge-person {
      background: #e3f2fd;
      color: #1976d2;
    }

    .badge-entity {
      background: #f3e5f5;
      color: #7b1fa2;
    }

    .badge-active {
      background: #e8f5e8;
      color: #2e7d32;
    }

    .action-btn {
      padding: 6px 12px;
      font-size: 0.85rem;
      border-radius: 6px;
      border: none;
      font-weight: 500;
    }

    .nav-tabs-clean {
      border-bottom: 2px solid #e9ecef;
      background: #f8f9fa;
      padding: 10px 20px 0;
      margin: 0;
    }

    .nav-tabs-clean .nav-link {
      border: 1px solid #e0e0e0;
      border-radius: 8px 8px 0 0;
      color: #666666 !important;
      font-weight: 600 !important;
      font-size: 13px !important;
      padding: 10px 16px;
      margin-right: 3px;
      background: #f8f9fa !important;
      text-decoration: none !important;
      display: inline-block !important;
      transition: all 0.2s ease;
    }

    .nav-tabs-clean .nav-link.active {
      background: #ff6b35 !important;
      color: #ffffff !important;
      border: 1px solid #ff6b35;
      font-weight: 700 !important;
      box-shadow: 0 2px 4px rgba(255, 107, 53, 0.2);
    }

    .nav-tabs-clean .nav-link:hover {
      background: #fff5f2 !important;
      color: #ff6b35 !important;
      border: 1px solid #ffb399;
    }

    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      display: none;
    }

    .loading-spinner {
      width: 3rem;
      height: 3rem;
      border: 0.3rem solid rgba(255, 255, 255, 0.3);
      border-top: 0.3rem solid #ff6b35;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .file-upload-area {
      border: 2px dashed #dee2e6;
      border-radius: 8px;
      padding: 40px 20px;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
      background: #f8f9fa;
    }

    .file-upload-area:hover {
      border-color: #ff6b35;
      background: rgba(255, 107, 53, 0.05);
    }

    .file-upload-area.file-selected {
      border-color: #28a745;
      background: #f8fff8;
    }

    .file-upload-area.file-selected .file-upload-icon {
      color: #28a745;
    }

    .file-upload-icon {
      font-size: 2rem;
      color: #ff6b35;
      margin-bottom: 10px;
    }

    .file-upload-text {
      font-weight: 600;
      color: #333;
      margin-bottom: 5px;
    }

    .file-upload-hint {
      color: #6c757d;
      font-size: 0.9rem;
    }

    .file-input-hidden {
      display: none;
    }

    /* Enhanced Statistics Cards */
    .stat-card {
      background: white;
      border-radius: 12px;
      padding: 20px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      border-left: 4px solid;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .stat-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    .stat-card.low-risk {
      border-left-color: #2e7d32;
      background: linear-gradient(135deg, #e8f5e8 0%, #f1f8e9 100%);
    }

    .stat-card.medium-risk {
      border-left-color: #ef6c00;
      background: linear-gradient(135deg, #fff3e0 0%, #fef7ed 100%);
    }

    .stat-card.high-risk {
      border-left-color: #c62828;
      background: linear-gradient(135deg, #ffebee 0%, #fef2f2 100%);
    }

    .stat-card.total-clients {
      border-left-color: #1976d2;
      background: linear-gradient(135deg, #e3f2fd 0%, #f0f9ff 100%);
    }

    .stat-number {
      font-size: 2.5rem;
      font-weight: 700;
      margin: 10px 0;
    }

    .stat-icon {
      position: absolute;
      top: 15px;
      right: 15px;
      font-size: 2rem;
      opacity: 0.3;
    }

    /* Enhanced Client Cards */
    .client-info-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      border: none;
      transition: all 0.3s ease;
    }

    .client-info-card:hover {
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    .client-info-card .card-header {
      background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
      color: white;
      border-radius: 12px 12px 0 0;
      padding: 15px 20px;
      border: none;
    }

    .actions-card .card-header {
      background: linear-gradient(135deg, #2e7d32 0%, #388e3c 100%);
    }

    /* Enhanced Action Buttons */
    .action-btn-enhanced {
      background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
      border: none;
      border-radius: 8px;
      padding: 12px 20px;
      color: white;
      font-weight: 600;
      transition: all 0.3s ease;
      margin-bottom: 10px;
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .action-btn-enhanced:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(255, 107, 53, 0.4);
      color: white;
    }

    .action-btn-secondary {
      background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
    }

    .action-btn-secondary:hover {
      box-shadow: 0 4px 12px rgba(108, 117, 125, 0.4);
    }

    /* Enhanced Risk Assessment Table - Excel-like styling */
    .risk-assessment-table {
      background: white;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      border: 2px solid #8B4513;
    }

    .risk-assessment-table .table {
      margin: 0;
      border-collapse: collapse;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .risk-assessment-table .table th {
      background: #8B4513;
      color: white;
      border: 1px solid #654321;
      padding: 10px 8px;
      font-weight: 600;
      font-size: 0.9rem;
    }

    .risk-assessment-table .table td {
      padding: 6px 8px;
      border: 1px solid #ccc;
      vertical-align: middle;
      font-size: 0.8rem;
      line-height: 1.2;
    }

    .risk-assessment-table .table tbody tr:hover {
      background: rgba(139, 69, 19, 0.05);
    }

    /* Category cells styling - Excel-like */
    .risk-assessment-table .table td.category-cell {
      background-color: #f5f5f5 !important;
      font-weight: bold;
      border-left: 3px solid #8B4513;
      border-right: 1px solid #ccc;
      color: #333;
      text-align: left;
      vertical-align: middle;
    }

    /* Factor description cells */
    .risk-assessment-table .table td.factor-cell {
      background-color: #fafafa;
      color: #444;
      font-size: 0.75rem;
      padding: 5px 6px;
      line-height: 1.1;
    }

    /* Profile data cells styling - Excel-like */
    .risk-assessment-table .table td.profile-data {
      background-color: white !important;
      font-weight: bold;
      color: #2c3e50;
      text-align: center;
      border: 1px solid #ccc;
    }

    /* Rating cells styling - Excel-like */
    .risk-assessment-table .table td.rating-cell {
      font-weight: bold;
      text-align: center;
      border: 1px solid #ccc;
      color: #333;
    }

    /* Header row styling */
    .risk-assessment-table .table thead tr {
      background: #8B4513;
    }

    .risk-assessment-table .table thead td {
      background: #8B4513 !important;
      color: white !important;
      font-weight: bold;
      text-align: center;
      border: 1px solid #654321;
    }

    /* Enhanced Search and Filter */
    .search-filter-bar {
      background: white;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .search-input {
      border: 2px solid #e9ecef;
      border-radius: 8px;
      padding: 10px 15px;
      transition: all 0.3s ease;
    }

    .search-input:focus {
      border-color: #ff6b35;
      box-shadow: 0 0 0 0.2rem rgba(255, 107, 53, 0.25);
    }

    /* Enhanced Progress Indicators */
    .progress-enhanced {
      height: 8px;
      border-radius: 4px;
      background: #f0f0f0;
      overflow: hidden;
    }

    .progress-bar-enhanced {
      height: 100%;
      border-radius: 4px;
      transition: width 0.6s ease;
    }

    /* Enhanced Tooltips */
    .tooltip-enhanced {
      position: relative;
      cursor: help;
    }

    .tooltip-enhanced:hover::after {
      content: attr(data-tooltip);
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      background: #333;
      color: white;
      padding: 8px 12px;
      border-radius: 6px;
      font-size: 12px;
      white-space: nowrap;
      z-index: 1000;
    }

    /* Enhanced Tab Styling - Removed duplicate rules */

    /* Enhanced Modal Styling */
    .modal-enhanced .modal-content {
      border: none;
      border-radius: 12px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    .modal-enhanced .modal-header {
      background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
      color: white;
      border-radius: 12px 12px 0 0;
      border: none;
    }

    /* Timeline Styling */
    .timeline {
      position: relative;
      padding-left: 30px;
    }

    .timeline::before {
      content: '';
      position: absolute;
      left: 15px;
      top: 0;
      bottom: 0;
      width: 2px;
      background: #e9ecef;
    }

    .timeline-item {
      position: relative;
      margin-bottom: 20px;
    }

    .timeline-marker {
      position: absolute;
      left: -23px;
      top: 5px;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      border: 2px solid white;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .timeline-content {
      background: white;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      border-left: 3px solid #ff6b35;
    }

    .timeline-title {
      margin-bottom: 5px;
      color: #333;
      font-weight: 600;
    }

    .timeline-text {
      margin-bottom: 5px;
      color: #666;
    }

    /* Enhanced Table Styling */
    .clean-table {
      background: white;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .clean-table thead th {
      background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
      color: white;
      border: none;
      padding: 15px;
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.85rem;
      letter-spacing: 0.5px;
    }

    .clean-table tbody tr {
      transition: all 0.3s ease;
    }

    .clean-table tbody tr:hover {
      background: rgba(255, 107, 53, 0.05);
      transform: translateX(2px);
    }

    .clean-table tbody td {
      padding: 15px;
      border-bottom: 1px solid #f0f0f0;
      vertical-align: middle;
    }

    /* Enhanced Status Badges */
    .status-badge {
      padding: 6px 12px;
      border-radius: 20px;
      font-weight: 600;
      font-size: 0.8rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .badge-active {
      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
      color: white;
    }

    .badge-person {
      background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
      color: #333;
    }

    .badge-entity {
      background: linear-gradient(135deg, #dc3545 0%, #e83e8c 100%);
      color: white;
    }

    /* Loading Animation */
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }

    .loading-pulse {
      animation: pulse 1.5s ease-in-out infinite;
    }

    /* Responsive Enhancements */
    @media (max-width: 768px) {
      .stat-card {
        margin-bottom: 15px;
      }

      .stat-number {
        font-size: 2rem;
      }

      .action-btn-enhanced {
        padding: 10px 15px;
        font-size: 0.9rem;
      }

      .search-filter-bar .row > div {
        margin-bottom: 10px;
      }

      .timeline {
        padding-left: 20px;
      }

      .timeline-marker {
        left: -18px;
        width: 12px;
        height: 12px;
      }
    }

    /* Back to Main Menu button styling */
    .btn-outline-light {
      border-color: rgba(255, 255, 255, 0.3);
      color: white;
      transition: all 0.3s ease;
    }

    .btn-outline-light:hover {
      background-color: rgba(255, 255, 255, 0.2);
      border-color: rgba(255, 255, 255, 0.5);
      color: white;
      transform: translateY(-1px);
    }

    /* Print Styles */
    @media print {
      .search-filter-bar,
      .action-btn-enhanced,
      .card-header button {
        display: none !important;
      }

      .stat-card {
        break-inside: avoid;
      }

      .risk-assessment-table {
        break-inside: avoid;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>

  <div class="container-fluid">
    <!-- AML Center Header -->
    <div class="aml-header d-flex align-items-center justify-content-between">
      <div class="d-flex align-items-center">
        <div class="aml-logo">
          <i class="fas fa-shield-alt text-primary"></i>
        </div>
        <div>
          <h4 class="mb-0">Client Space</h4>
          <small>BC/FT Risk Assessment</small>
        </div>
      </div>
      <div class="d-flex align-items-center">
        <a href="/" class="btn btn-outline-light btn-sm me-2">
          <i class="fas fa-arrow-left me-2"></i>Back to Main Menu
        </a>
        <a href="/amlcenter" class="btn btn-light btn-sm me-2">
          <i class="fas fa-home me-2"></i>Back to Home
        </a>
        <div class="me-3">
          <i class="fas fa-user-circle me-2"></i>
          <small><%= new Date().toLocaleDateString('en-US', { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' }) %></small>
        </div>
      </div>
    </div>

    <div class="row mb-4">
      <div class="col-12">
        <div class="section-card">
          <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-file-excel me-2"></i>Import Risk Assessment Excel File</h5>
          </div>
          <div class="card-body">
            <% if (!clientData) { %>
              <form action="/amlcenter/upload-risk-assessment" method="post" enctype="multipart/form-data" id="riskAssessmentForm">
                <div class="file-upload-area" onclick="document.getElementById('excelFile').click()">
                  <input type="file" class="file-input-hidden" id="excelFile" name="excelFile" accept=".xlsx,.xls" required>
                  <div class="file-upload-icon">
                    <i class="fas fa-file-excel"></i>
                  </div>
                  <div class="file-upload-text">Click to select Excel file</div>
                  <div class="file-upload-hint">Upload .xlsx or .xls file with risk assessment data</div>
                  <button type="button" class="btn btn-sm btn-outline-secondary mt-2" onclick="event.stopPropagation(); clearFileSelection('excelFile')" style="display: none;" id="clearFileBtn">
                    <i class="fas fa-times me-1"></i>Clear Selection
                  </button>
                </div>

                <!-- Enhanced Upload Options -->
                <div class="mt-3">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="enhancedExtraction">
                    <label class="form-check-label" for="enhancedExtraction">
                      <i class="fas fa-magic me-1"></i>Enhanced data extraction
                    </label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="validateData" checked>
                    <label class="form-check-label" for="validateData">
                      <i class="fas fa-check-circle me-1"></i>Validate extracted data
                    </label>
                  </div>
                </div>

                <div class="mt-3 d-grid">
                  <button type="submit" class="btn btn-primary">
                    <i class="fas fa-upload me-2"></i>Import and Analyze
                  </button>
                </div>
              </form>
            <% } else { %>
              <div class="alert alert-success">
                <div class="d-flex align-items-center">
                  <i class="fas fa-check-circle me-3" style="font-size: 1.5rem;"></i>
                  <div>
                    <strong>Risk Assessment Data Processed Successfully!</strong><br>
                    <small class="text-muted">Found <%= clientCount %> clients in the Excel file.</small>
                  </div>
                </div>
              </div>
              <form action="/amlcenter/upload-risk-assessment" method="post" enctype="multipart/form-data">
                <div class="file-upload-area" onclick="document.getElementById('excelFileUpdate').click()">
                  <input type="file" class="file-input-hidden" id="excelFileUpdate" name="excelFile" accept=".xlsx,.xls" required>
                  <div class="file-upload-icon">
                    <i class="fas fa-sync-alt"></i>
                  </div>
                  <div class="file-upload-text">Click to update Excel file</div>
                  <div class="file-upload-hint">Replace current data with new Excel file</div>
                  <button type="button" class="btn btn-sm btn-outline-secondary mt-2" onclick="event.stopPropagation(); clearFileSelection('excelFileUpdate')" style="display: none;" id="clearFileUpdateBtn">
                    <i class="fas fa-times me-1"></i>Clear Selection
                  </button>
                </div>
                <div class="mt-3 d-grid">
                  <button type="submit" class="btn btn-warning">
                    <i class="fas fa-sync-alt me-2"></i>Update Data
                  </button>
                </div>
              </form>
            <% } %>
          </div>
        </div>
      </div>
    </div>
    
    <% if (clientData && clientData.length > 0) { %>
      <div class="section-card">
        <div class="card-header">
          <h5 class="mb-0"><i class="fas fa-chart-line me-2"></i>Risk Assessment by Client</h5>
        </div>
        <div class="card-body p-0">
          <nav class="nav-tabs-clean mb-0">
            <div class="nav nav-tabs" id="clientTabs" role="tablist">
              <button class="nav-link active" id="summary-tab" data-bs-toggle="tab" data-bs-target="#summary" type="button" role="tab" aria-controls="summary" aria-selected="true">
                Summary
              </button>
              <% clientData.forEach((client, index) => { %>
                <button class="nav-link" id="client-<%= index %>-tab" data-bs-toggle="tab" data-bs-target="#client-<%= index %>" type="button" role="tab" aria-controls="client-<%= index %>" aria-selected="false">
                  <%= client.name %>
                </button>
              <% }); %>
            </div>
          </nav>

          <div class="tab-content p-3" id="clientTabsContent">
            <!-- Summary Tab -->
            <div class="tab-pane fade show active" id="summary" role="tabpanel" aria-labelledby="summary-tab">
              <!-- Enhanced Search and Filter Bar -->
              <div class="search-filter-bar mb-4">
                <div class="row align-items-center">
                  <div class="col-md-6">
                    <div class="input-group">
                      <span class="input-group-text bg-light border-0">
                        <i class="fas fa-search text-muted"></i>
                      </span>
                      <input type="text" class="form-control search-input border-start-0" id="clientSearch" placeholder="Search clients by name or risk level...">
                    </div>
                  </div>
                  <div class="col-md-3">
                    <select class="form-select search-input" id="riskFilter">
                      <option value="">All Risk Levels</option>
                      <option value="Faible">Low Risk</option>
                      <option value="Moyen">Medium Risk</option>
                      <option value="Élevé">High Risk</option>
                      <option value="Elevé">High Risk</option>
                    </select>
                  </div>
                  <div class="col-md-3">
                    <button class="btn action-btn-enhanced w-100" onclick="exportAllData()">
                      <i class="fas fa-download me-2"></i>Export All
                    </button>
                  </div>
                </div>
              </div>

              <!-- Enhanced Statistics Cards -->
              <div class="row mb-4">
                <div class="col-md-3 mb-3">
                  <div class="stat-card total-clients">
                    <i class="fas fa-users stat-icon"></i>
                    <div class="stat-number text-primary"><%= clientData.length %></div>
                    <div class="fw-bold text-muted">Total Clients</div>
                    <div class="progress-enhanced mt-2">
                      <div class="progress-bar-enhanced bg-primary" style="width: 100%;"></div>
                    </div>
                  </div>
                </div>
                <div class="col-md-3 mb-3">
                  <div class="stat-card low-risk">
                    <i class="fas fa-shield-alt stat-icon"></i>
                    <div class="stat-number text-success"><%= clientData.filter(c => c.riskLevel === 'Faible').length %></div>
                    <div class="fw-bold text-muted">Low Risk</div>
                    <div class="progress-enhanced mt-2">
                      <div class="progress-bar-enhanced bg-success" style="width: <%= clientData.length > 0 ? (clientData.filter(c => c.riskLevel === 'Faible').length / clientData.length * 100) : 0 %>%;"></div>
                    </div>
                  </div>
                </div>
                <div class="col-md-3 mb-3">
                  <div class="stat-card medium-risk">
                    <i class="fas fa-exclamation-triangle stat-icon"></i>
                    <div class="stat-number text-warning"><%= clientData.filter(c => c.riskLevel === 'Moyen').length %></div>
                    <div class="fw-bold text-muted">Medium Risk</div>
                    <div class="progress-enhanced mt-2">
                      <div class="progress-bar-enhanced bg-warning" style="width: <%= clientData.length > 0 ? (clientData.filter(c => c.riskLevel === 'Moyen').length / clientData.length * 100) : 0 %>%;"></div>
                    </div>
                  </div>
                </div>
                <div class="col-md-3 mb-3">
                  <div class="stat-card high-risk">
                    <i class="fas fa-ban stat-icon"></i>
                    <div class="stat-number text-danger"><%= clientData.filter(c => c.riskLevel === 'Élevé' || c.riskLevel === 'Elevé').length %></div>
                    <div class="fw-bold text-muted">High Risk</div>
                    <div class="progress-enhanced mt-2">
                      <div class="progress-bar-enhanced bg-danger" style="width: <%= clientData.length > 0 ? (clientData.filter(c => c.riskLevel === 'Élevé' || c.riskLevel === 'Elevé').length / clientData.length * 100) : 0 %>%;"></div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="table-responsive">
                <table class="clean-table table" id="clientsTable">
                  <thead>
                    <tr>
                      <th><i class="fas fa-user me-2"></i>Client</th>
                      <th><i class="fas fa-shield-alt me-2"></i>Risk Level</th>
                      <th><i class="fas fa-calendar-alt me-2"></i>Update Date</th>
                      <th><i class="fas fa-calendar-check me-2"></i>Assessment Date</th>
                      <th><i class="fas fa-cogs me-2"></i>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% clientData.forEach((client, index) => { %>
                      <tr data-client-index="<%= index %>">
                        <td>
                          <div class="d-flex align-items-center">
                            <div class="avatar-circle me-3" style="width: 40px; height: 40px; background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold;">
                              <%= client.name.charAt(0).toUpperCase() %>
                            </div>
                            <div>
                              <strong><%= client.name %></strong>
                              <br>
                              <small class="text-muted">Client ID: <%= index + 1 %></small>
                            </div>
                          </div>
                        </td>
                        <td>
                          <span class="status-badge <%= client.riskLevel === 'Faible' ? 'badge-active' : client.riskLevel === 'Moyen' ? 'badge-person' : 'badge-entity' %>">
                            <i class="fas <%= client.riskLevel === 'Faible' ? 'fa-shield-alt' : client.riskLevel === 'Moyen' ? 'fa-exclamation-triangle' : 'fa-ban' %> me-1"></i>
                            <%= client.riskLevel %>
                          </span>
                        </td>
                        <td>
                          <i class="fas fa-calendar-alt me-2 text-muted"></i>
                          <%= typeof client.updateDate === 'string' && client.updateDate.includes('-') ? new Date(client.updateDate).toLocaleDateString('fr-FR') : typeof client.updateDate === 'number' ? new Date(Math.round((client.updateDate - 25569) * 86400 * 1000)).toLocaleDateString('fr-FR') : client.updateDate %>
                        </td>
                        <td>
                          <i class="fas fa-calendar-check me-2 text-muted"></i>
                          <%= typeof client.assessmentDate === 'string' && client.assessmentDate.includes('-') ? new Date(client.assessmentDate).toLocaleDateString('fr-FR') : typeof client.assessmentDate === 'number' ? new Date(Math.round((client.assessmentDate - 25569) * 86400 * 1000)).toLocaleDateString('fr-FR') : client.assessmentDate %>
                        </td>
                        <td>
                          <div class="btn-group" role="group">
                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="showClientDetails(<%= index %>)" title="View Details">
                              <i class="fas fa-eye"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-success" onclick="exportClientPDF('<%= client.name %>')" title="Export PDF">
                              <i class="fas fa-file-pdf"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-info" onclick="showClientHistory('<%= client.name %>')" title="View History">
                              <i class="fas fa-history"></i>
                            </button>
                          </div>
                        </td>
                      </tr>
                    <% }); %>
                  </tbody>
                </table>
              </div>
            </div>
            
            <!-- Individual Client Tabs -->
            <% clientData.forEach((client, index) => { %>
              <div class="tab-pane fade" id="client-<%= index %>" role="tabpanel" aria-labelledby="client-<%= index %>-tab">
                <div class="row mb-3">
                  <div class="col-md-6">
                    <div class="client-info-card">
                      <div class="card-header">
                        <h6 class="mb-0"><i class="fas fa-user me-2"></i>Informations générales</h6>
                      </div>
                      <div class="card-body">
                        <div class="row mb-3">
                          <div class="col-sm-4 fw-bold text-muted">Nom du client:</div>
                          <div class="col-sm-8"><%= client.name %></div>
                        </div>
                        <div class="row mb-3">
                          <div class="col-sm-4 fw-bold text-muted">Niveau de risque:</div>
                          <div class="col-sm-8">
                            <span class="badge fs-6 <%= client.riskLevel === 'Faible' ? 'bg-success' : client.riskLevel === 'Moyen' ? 'bg-warning text-dark' : 'bg-danger' %>">
                              <i class="fas <%= client.riskLevel === 'Faible' ? 'fa-shield-alt' : client.riskLevel === 'Moyen' ? 'fa-exclamation-triangle' : 'fa-ban' %> me-1"></i>
                              <%= client.riskLevel %>
                            </span>
                          </div>
                        </div>
                        <div class="row mb-3">
                          <div class="col-sm-4 fw-bold text-muted">Date de MAJ:</div>
                          <div class="col-sm-8">
                            <i class="fas fa-calendar-alt me-1 text-muted"></i>
                            <%= typeof client.updateDate === 'string' && client.updateDate.includes('-') ? new Date(client.updateDate).toLocaleDateString('fr-FR') : typeof client.updateDate === 'number' ? new Date(Math.round((client.updateDate - 25569) * 86400 * 1000)).toLocaleDateString('fr-FR') : client.updateDate %>
                          </div>
                        </div>
                        <div class="row mb-3">
                          <div class="col-sm-4 fw-bold text-muted">Date d'EER:</div>
                          <div class="col-sm-8">
                            <i class="fas fa-calendar-check me-1 text-muted"></i>
                            <%= typeof client.assessmentDate === 'string' && client.assessmentDate.includes('-') ? new Date(client.assessmentDate).toLocaleDateString('fr-FR') : typeof client.assessmentDate === 'number' ? new Date(Math.round((client.assessmentDate - 25569) * 86400 * 1000)).toLocaleDateString('fr-FR') : client.assessmentDate %>
                          </div>
                        </div>

                        <!-- Enhanced Data Quality Indicators -->
                        <% if (client.dataQuality) { %>
                        <div class="row mb-3">
                          <div class="col-sm-4 fw-bold text-muted">Qualité des données:</div>
                          <div class="col-sm-8">
                            <div class="d-flex flex-wrap gap-1">
                              <span class="badge <%= client.dataQuality.categoriesFound > 0 ? 'bg-success' : 'bg-warning' %> text-white">
                                <i class="fas fa-layer-group me-1"></i><%= client.dataQuality.categoriesFound %> catégories
                              </span>
                              <span class="badge <%= client.dataQuality.factorsFound > 0 ? 'bg-success' : 'bg-warning' %> text-white">
                                <i class="fas fa-list me-1"></i><%= client.dataQuality.factorsFound %> facteurs
                              </span>
                              <span class="badge <%= client.dataQuality.hasValidRiskLevel ? 'bg-success' : 'bg-danger' %> text-white">
                                <i class="fas fa-shield-alt me-1"></i>Risque <%= client.dataQuality.hasValidRiskLevel ? 'valide' : 'invalide' %>
                              </span>
                            </div>
                          </div>
                        </div>
                        <% } %>

                        <!-- Additional Information -->
                        <% if (client.additionalInfo && Object.keys(client.additionalInfo).length > 0) { %>
                        <div class="row mb-0">
                          <div class="col-sm-4 fw-bold text-muted">Informations supplémentaires:</div>
                          <div class="col-sm-8">
                            <% Object.entries(client.additionalInfo).forEach(([key, value]) => { %>
                              <div class="small text-muted">
                                <strong><%= key %>:</strong> <%= value %>
                              </div>
                            <% }); %>
                          </div>
                        </div>
                        <% } %>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="client-info-card actions-card">
                      <div class="card-header">
                        <h6 class="mb-0"><i class="fas fa-cogs me-2"></i>Actions</h6>
                      </div>
                      <div class="card-body d-flex justify-content-center align-items-center" style="min-height: 200px;">
                        <div class="w-100">
                          <button class="action-btn-enhanced mb-3" onclick="exportClientPDF('<%= client.name %>')">
                            <i class="fas fa-file-pdf me-2"></i>Exporter PDF
                          </button>
                          <button class="action-btn-secondary action-btn-enhanced mb-3" onclick="showClientHistory('<%= client.name %>')">
                            <i class="fas fa-history me-2"></i>Historique des évaluations
                          </button>
                          <button class="action-btn-enhanced" onclick="editClientData('<%= client.name %>')" style="background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);">
                            <i class="fas fa-edit me-2"></i>Modifier les données
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Risk Assessment Details -->
                <div class="risk-assessment-table">
                  <div class="card-header" style="background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%); color: white; border: none;">
                    <div class="d-flex justify-content-between align-items-center">
                      <h6 class="mb-0"><i class="fas fa-chart-line me-2"></i>Détails de l'évaluation des risques</h6>
                      <div>
                        <button class="btn btn-sm btn-light me-2" onclick="toggleRiskDetails('<%= index %>')" title="Toggle Details">
                          <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-light" onclick="printRiskAssessment('<%= index %>')" title="Print">
                          <i class="fas fa-print"></i>
                        </button>
                      </div>
                    </div>
                  </div>
                  <div class="card-body p-0">
                    <div class="table-responsive">
                      <table class="table mb-0">
                        <!-- Header with BCP Logo and Title -->
                        <tr>
                          <td colspan="2" class="text-center" style="width: 25%;">
                            <img src="/amlcenter/img/bcp-logo.jpg" alt="BCP Securities Services" style="max-height: 60px;">
                            <div>SECURITIES SERVICES</div>
                          </td>
                          <td colspan="5" class="text-center bg-light" style="background-color: #FFEFD5;">
                            <h4><%= client.name %></h4>
                          </td>
                          <td colspan="2" class="text-center">
                            <div>Date de MAJ</div>
                            <div><%= typeof client.updateDate === 'string' && client.updateDate.includes('-') ? new Date(client.updateDate).toLocaleDateString('fr-FR') : typeof client.updateDate === 'number' ? new Date(Math.round((client.updateDate - 25569) * 86400 * 1000)).toLocaleDateString('fr-FR') : client.updateDate %></div>
                          </td>
                        </tr>
                        <tr>
                          <td colspan="7"></td>
                          <td colspan="2" class="text-center">
                            <div>Date d'EER</div>
                            <div><%= typeof client.assessmentDate === 'string' && client.assessmentDate.includes('-') ? new Date(client.assessmentDate).toLocaleDateString('fr-FR') : typeof client.assessmentDate === 'number' ? new Date(Math.round((client.assessmentDate - 25569) * 86400 * 1000)).toLocaleDateString('fr-FR') : client.assessmentDate %></div>
                          </td>
                        </tr>
                        
                        <!-- Main Title -->
                        <tr>
                          <td colspan="9" class="text-center text-white" style="background-color: #8B4513;">
                            <h5 class="mb-0">Evaluation des risques BC/FT</h5>
                          </td>
                        </tr>
                        
                        <!-- Subtitle -->
                        <tr>
                          <td colspan="9" class="text-center text-white" style="background-color: #E97451;">
                            <h6 class="mb-0">Identification des risques BC/FT</h6>
                          </td>
                        </tr>
                        
                        <!-- Table Headers - matching Excel format exactly (4 columns) -->
                        <thead>
                          <tr>
                            <td style="width: 18%;">
                              <strong>Facteurs de risques</strong>
                            </td>
                            <td colspan="2" style="width: 67%;">
                              <strong>Profil de risques</strong>
                            </td>
                            <td style="width: 15%;">
                              <strong>Notation de risque</strong>
                            </td>
                          </tr>
                        </thead>
                        

                        
                        <!-- Display processed risk table data in Excel format with merged cells -->
                        <% if (client.processedRiskTable && client.processedRiskTable.length > 0) { %>
                          <%
                          // Create a flat structure that matches the Excel format exactly
                          let tableRows = [];
                          client.processedRiskTable.forEach(category => {
                            if (category.factors && category.factors.length > 0) {
                              category.factors.forEach((factor, factorIndex) => {
                                tableRows.push({
                                  categoryName: category.name,
                                  categoryRating: category.rating,
                                  factorName: factor.name,
                                  factorProfile: factor.profile,
                                  factorRating: factor.rating,
                                  isFirstInCategory: factorIndex === 0,
                                  categoryRowspan: category.factors.length
                                });
                              });
                            } else {
                              // Category with no factors
                              tableRows.push({
                                categoryName: category.name,
                                categoryRating: category.rating,
                                factorName: '',
                                factorProfile: 'Non spécifié',
                                factorRating: category.rating,
                                isFirstInCategory: true,
                                categoryRowspan: 1
                              });
                            }
                          });
                          %>

                          <% tableRows.forEach((row, index) => { %>
                            <tr>
                              <!-- Category column (merged cell effect) -->
                              <% if (row.isFirstInCategory) { %>
                                <td rowspan="<%= row.categoryRowspan %>" class="category-cell" style="width: 18%;">
                                  <%= row.categoryName %>
                                </td>
                              <% } %>

                              <!-- Factor description column (from factorName) -->
                              <td class="factor-cell" style="width: 42%;">
                                <%= row.factorName %>
                              </td>

                              <!-- Profile data column (from factorProfile) -->
                              <td class="profile-data" style="width: 25%;">
                                <%= row.factorProfile %>
                              </td>

                              <!-- Rating column (merged cell effect - only show in first row of category) -->
                              <% if (row.isFirstInCategory) { %>
                                <td rowspan="<%= row.categoryRowspan %>" class="rating-cell" style="
                                  background-color: <%= row.categoryRating === 'Faible' ? '#90EE90' : row.categoryRating === 'Moyen' ? '#FFD700' : '#FF6347' %>;
                                  width: 15%;
                                ">
                                  <%= row.categoryRating %>
                                </td>
                              <% } %>
                            </tr>
                          <% }); %>
                        <% } else { %>
                          <!-- No risk data available -->
                          <tr>
                            <td colspan="4" class="text-center text-muted" style="padding: 20px 15px; font-style: italic;">
                              <i class="fas fa-info-circle me-2"></i>
                              Aucune donnée d'évaluation des risques disponible pour ce client
                            </td>
                          </tr>
                        <% } %>

                        <!-- Risk Level Summary -->
                        <tr style="border-top: 2px solid #8B4513;">
                          <td class="text-center" style="background-color: #f5f5f5; font-weight: bold; padding: 12px; border: 1px solid #ccc;">
                            <strong>Niveau risque</strong>
                          </td>
                          <td colspan="3" class="text-center" style="background-color: <%= client.riskLevel === 'Faible' ? '#90EE90' : client.riskLevel === 'Moyen' ? '#FFD700' : '#FF6347' %>; font-weight: bold; font-size: 1.1rem; padding: 12px; border: 1px solid #ccc;">
                            <strong><%= client.riskLevel %></strong>
                          </td>
                        </tr>

                        <!-- Action Buttons -->
                        <tr>
                          <td colspan="4" class="text-center" style="padding: 15px; background-color: #f9f9f9;">
                            <button class="btn btn-primary mx-2" style="background-color: #8B4513; border-color: #8B4513;"><i class="fas fa-calculator me-2"></i>Calculer</button>
                            <button class="btn btn-secondary mx-2"><i class="fas fa-redo me-2"></i>Initialiser</button>
                          </td>
                        </tr>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            <% }); %>
          </div>
        </div>
      </div>
    <% } %>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Enhanced Modals -->
  <div class="modal fade modal-enhanced" id="clientHistoryModal" tabindex="-1" aria-labelledby="clientHistoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="clientHistoryModalLabel">
            <i class="fas fa-history me-2"></i>Client History
          </h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="historyContent">
            <div class="text-center">
              <i class="fas fa-spinner fa-spin fa-2x text-muted"></i>
              <p class="mt-2 text-muted">Loading history...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade modal-enhanced" id="editClientModal" tabindex="-1" aria-labelledby="editClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editClientModalLabel">
            <i class="fas fa-edit me-2"></i>Edit Client Data
          </h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="editContent">
            <div class="text-center">
              <i class="fas fa-spinner fa-spin fa-2x text-muted"></i>
              <p class="mt-2 text-muted">Loading client data...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Show/hide loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').style.display = 'flex';
    }

    function hideLoading() {
      document.getElementById('loadingOverlay').style.display = 'none';
    }

    // Enhanced client search functionality
    function initializeSearch() {
      const searchInput = document.getElementById('clientSearch');
      const riskFilter = document.getElementById('riskFilter');

      if (searchInput && riskFilter) {
        function filterClients() {
          const searchTerm = searchInput.value.toLowerCase();
          const riskLevel = riskFilter.value;
          const tableRows = document.querySelectorAll('#summary tbody tr');

          tableRows.forEach(row => {
            const clientName = row.cells[0].textContent.toLowerCase();
            const clientRisk = row.cells[1].textContent.trim();

            const matchesSearch = clientName.includes(searchTerm);
            const matchesRisk = !riskLevel || clientRisk.includes(riskLevel);

            row.style.display = (matchesSearch && matchesRisk) ? '' : 'none';
          });
        }

        searchInput.addEventListener('input', filterClients);
        riskFilter.addEventListener('change', filterClients);
      }
    }

    // Export functionality
    function exportAllData() {
      showLoading();

      // Simulate export process
      setTimeout(() => {
        hideLoading();

        // Create a simple CSV export
        const clientData = <%= JSON.stringify(clientData || []) %>;
        let csvContent = "Client Name,Risk Level,Update Date,Assessment Date\n";

        clientData.forEach(client => {
          csvContent += `"${client.name}","${client.riskLevel}","${client.updateDate}","${client.assessmentDate}"\n`;
        });

        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'client_risk_assessment_' + new Date().toISOString().split('T')[0] + '.csv';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);

        showNotification('Data exported successfully!', 'success');
      }, 1500);
    }

    function exportClientPDF(clientName) {
      showLoading();

      setTimeout(() => {
        hideLoading();
        showNotification(`PDF export for ${clientName} is being prepared...`, 'info');
      }, 1000);
    }

    function showClientHistory(clientName) {
      const modal = new bootstrap.Modal(document.getElementById('clientHistoryModal'));
      const historyContent = document.getElementById('historyContent');

      // Simulate loading history
      setTimeout(() => {
        historyContent.innerHTML = `
          <h6>History for ${clientName}</h6>
          <div class="timeline">
            <div class="timeline-item">
              <div class="timeline-marker bg-success"></div>
              <div class="timeline-content">
                <h6 class="timeline-title">Risk Assessment Updated</h6>
                <p class="timeline-text">Risk level changed to current status</p>
                <small class="text-muted">${new Date().toLocaleDateString()}</small>
              </div>
            </div>
            <div class="timeline-item">
              <div class="timeline-marker bg-info"></div>
              <div class="timeline-content">
                <h6 class="timeline-title">Initial Assessment</h6>
                <p class="timeline-text">Client onboarded and initial risk assessment completed</p>
                <small class="text-muted">${new Date(Date.now() - 30*24*60*60*1000).toLocaleDateString()}</small>
              </div>
            </div>
          </div>
        `;
      }, 500);

      modal.show();
    }

    function editClientData(clientName) {
      const modal = new bootstrap.Modal(document.getElementById('editClientModal'));
      const editContent = document.getElementById('editContent');

      // Simulate loading edit form
      setTimeout(() => {
        editContent.innerHTML = `
          <form id="editClientForm">
            <div class="mb-3">
              <label for="clientNameEdit" class="form-label">Client Name</label>
              <input type="text" class="form-control" id="clientNameEdit" value="${clientName}" readonly>
            </div>
            <div class="mb-3">
              <label for="riskLevelEdit" class="form-label">Risk Level</label>
              <select class="form-select" id="riskLevelEdit">
                <option value="Faible">Low Risk</option>
                <option value="Moyen">Medium Risk</option>
                <option value="Élevé">High Risk</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="notesEdit" class="form-label">Notes</label>
              <textarea class="form-control" id="notesEdit" rows="3" placeholder="Add any additional notes..."></textarea>
            </div>
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn action-btn-enhanced">Save Changes</button>
            </div>
          </form>
        `;

        document.getElementById('editClientForm').addEventListener('submit', function(e) {
          e.preventDefault();
          modal.hide();
          showNotification('Client data updated successfully!', 'success');
        });
      }, 500);

      modal.show();
    }

    function toggleRiskDetails(clientIndex) {
      const detailsSection = document.querySelector(`#client-${clientIndex} .risk-assessment-table .card-body`);
      if (detailsSection) {
        detailsSection.style.display = detailsSection.style.display === 'none' ? 'block' : 'none';
      }
    }

    function printRiskAssessment(clientIndex) {
      const printContent = document.querySelector(`#client-${clientIndex} .risk-assessment-table`);
      if (printContent) {
        const printWindow = window.open('', '_blank');
        printWindow.document.write(`
          <html>
            <head>
              <title>Risk Assessment Report</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                table { width: 100%; border-collapse: collapse; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f2f2f2; }
                .badge { padding: 4px 8px; border-radius: 4px; color: white; }
                .bg-success { background-color: #28a745; }
                .bg-warning { background-color: #ffc107; color: black; }
                .bg-danger { background-color: #dc3545; }
              </style>
            </head>
            <body>
              ${printContent.innerHTML}
            </body>
          </html>
        `);
        printWindow.document.close();
        printWindow.print();
      }
    }

    function showClientDetails(clientIndex) {
      // Switch to the specific client tab
      const clientTab = document.querySelector(`#client-${clientIndex}-tab`);
      if (clientTab) {
        clientTab.click();

        // Smooth scroll to the tab content
        setTimeout(() => {
          const tabContent = document.querySelector(`#client-${clientIndex}`);
          if (tabContent) {
            tabContent.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }, 200);

        showNotification('Switching to client details view...', 'info');
      }
    }

    // Notification system
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
      notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);';
      notification.innerHTML = `
        <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'danger' ? 'fa-exclamation-triangle' : type === 'warning' ? 'fa-exclamation-circle' : 'fa-info-circle'} me-2"></i>
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      `;

      document.body.appendChild(notification);

      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 5000);
    }

    // Initialize enhancements when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize search functionality
      initializeSearch();

      // Add loading states to forms
      const forms = document.querySelectorAll('form');
      forms.forEach(form => {
        form.addEventListener('submit', function(e) {
          const submitBtn = form.querySelector('button[type="submit"]');
          if (submitBtn) {
            // Show loading overlay for file uploads
            if (form.enctype === 'multipart/form-data') {
              showLoading();
            }

            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';
            submitBtn.disabled = true;

            // Re-enable after a timeout as fallback
            setTimeout(() => {
              hideLoading();
              submitBtn.innerHTML = originalText;
              submitBtn.disabled = false;
            }, 30000);
          }
        });
      });

      // Enhanced file upload with drag and drop
      const fileUploadAreas = document.querySelectorAll('.file-upload-area');
      fileUploadAreas.forEach(area => {
        area.addEventListener('dragover', function(e) {
          e.preventDefault();
          this.style.borderColor = '#ff6b35';
          this.style.backgroundColor = '#fff5f0';
        });

        area.addEventListener('dragleave', function(e) {
          e.preventDefault();
          this.style.borderColor = '#ff6b35';
          this.style.backgroundColor = '#fef7f0';
        });

        area.addEventListener('drop', function(e) {
          e.preventDefault();
          this.style.borderColor = '#ff6b35';
          this.style.backgroundColor = '#fef7f0';

          const files = e.dataTransfer.files;
          if (files.length > 0) {
            const fileInput = this.querySelector('input[type="file"]');
            if (fileInput) {
              fileInput.files = files;
              if (validateFile(fileInput)) {
                updateFileUploadDisplay(fileInput);
                showNotification('File selected: ' + files[0].name, 'success');
              }
            }
          }
        });
      });

      // Enhance action buttons with click handlers (excluding new enhanced buttons)
      const actionButtons = document.querySelectorAll('.btn:not([type="submit"]):not(.action-btn-enhanced):not([onclick])');
      actionButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();

          const buttonText = this.textContent.trim();
          const originalHTML = this.innerHTML;

          // Add loading state
          this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';
          this.disabled = true;

          // Simulate processing
          setTimeout(() => {
            this.innerHTML = originalHTML;
            this.disabled = false;

            // Show success message
            if (buttonText.includes('Calculer')) {
              showNotification('Calcul des risques effectué', 'success');
            } else if (buttonText.includes('Initialiser')) {
              showNotification('Données initialisées', 'info');
            }
          }, 1500);
        });
      });

      // Enhance table responsiveness
      const tables = document.querySelectorAll('table');
      tables.forEach(table => {
        if (!table.parentElement.classList.contains('table-responsive')) {
          const wrapper = document.createElement('div');
          wrapper.className = 'table-responsive';
          table.parentNode.insertBefore(wrapper, table);
          wrapper.appendChild(table);
        }
      });

      // Add smooth scrolling to client tabs
      const clientTabs = document.querySelectorAll('#clientTabs .nav-link');
      clientTabs.forEach(tab => {
        tab.addEventListener('click', function() {
          setTimeout(() => {
            const targetId = this.getAttribute('data-bs-target');
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
              targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
          }, 150);
        });
      });

      // Add keyboard shortcuts
      document.addEventListener('keydown', function(e) {
        // Ctrl+E for export
        if (e.ctrlKey && e.key === 'e') {
          e.preventDefault();
          exportAllData();
        }

        // Ctrl+F for search focus
        if (e.ctrlKey && e.key === 'f') {
          e.preventDefault();
          const searchInput = document.getElementById('clientSearch');
          if (searchInput) {
            searchInput.focus();
          }
        }
      });

      // Add tooltips to enhanced elements
      const tooltipElements = document.querySelectorAll('[title]');
      tooltipElements.forEach(element => {
        element.classList.add('tooltip-enhanced');
        element.setAttribute('data-tooltip', element.getAttribute('title'));
      });

      // Show welcome message
      setTimeout(() => {
        showNotification('Client Space loaded successfully! Use Ctrl+E to export data, Ctrl+F to search.', 'info');
      }, 1000);
    });

    // Add file validation
    function validateFile(input) {
      const file = input.files[0];
      if (file) {
        const validTypes = [
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'application/vnd.ms-excel'
        ];

        if (!validTypes.includes(file.type)) {
          alert('Veuillez sélectionner un fichier Excel valide (.xlsx ou .xls)');
          input.value = '';
          return false;
        }

        // Check file size (max 10MB)
        if (file.size > 10 * 1024 * 1024) {
          alert('Le fichier est trop volumineux. Taille maximale: 10MB');
          input.value = '';
          return false;
        }
      }
      return true;
    }

    // Enhanced file upload handling
    function handleEnhancedUpload() {
      const form = document.getElementById('riskAssessmentForm');
      const fileInput = document.getElementById('excelFile');

      if (form && fileInput) {
        form.addEventListener('submit', async function(e) {
          const enhancedExtraction = document.getElementById('enhancedExtraction')?.checked;
          const validateData = document.getElementById('validateData')?.checked;

          if (enhancedExtraction) {
            e.preventDefault();

            const file = fileInput.files[0];
            if (!file) {
              showNotification('Please select a file first', 'warning');
              return;
            }

            if (!validateFile(fileInput)) {
              return;
            }

            showLoading();

            try {
              const formData = new FormData();
              formData.append('excelFile', file);
              formData.append('enhancedExtraction', 'true');
              formData.append('validateData', validateData.toString());

              const response = await fetch('/amlcenter/upload-risk-assessment', {
                method: 'POST',
                body: formData
              });

              if (response.ok) {
                // Check if response is JSON or HTML redirect
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                  const result = await response.json();
                  if (result.success) {
                    showNotification(`Successfully processed ${result.clients.length} clients with enhanced extraction.`, 'success');
                  } else {
                    showNotification(`Error: ${result.error}`, 'error');
                  }
                } else {
                  // Server redirected, which means success
                  showNotification('File processed successfully! Reloading page...', 'success');
                }

                // Reload the page to show the processed data
                setTimeout(() => {
                  window.location.reload();
                }, 2000);
              } else {
                showNotification('Error processing file', 'error');
              }
            } catch (error) {
              console.error('Enhanced upload error:', error);
              showNotification('Error processing file with enhanced extraction', 'error');
            } finally {
              hideLoading();
            }
          }
        });
      }
    }

    // Clear file selection
    function clearFileSelection(inputId) {
      const input = document.getElementById(inputId);
      if (input) {
        input.value = '';
        updateFileUploadDisplay(input);
        showNotification('File selection cleared', 'info');
      }
    }

    // Update file upload area display when file is selected
    function updateFileUploadDisplay(input) {
      const uploadArea = input.closest('.file-upload-area');
      const uploadText = uploadArea.querySelector('.file-upload-text');
      const uploadHint = uploadArea.querySelector('.file-upload-hint');
      const uploadIcon = uploadArea.querySelector('.file-upload-icon i');
      const clearBtn = uploadArea.querySelector('button[onclick*="clearFileSelection"]');

      if (input.files && input.files[0]) {
        const file = input.files[0];
        uploadText.textContent = `✓ Selected: ${file.name}`;
        uploadHint.textContent = `File size: ${(file.size / 1024 / 1024).toFixed(2)} MB - Ready to upload`;
        uploadIcon.className = 'fas fa-check-circle';
        uploadArea.classList.add('file-selected');
        uploadArea.style.borderColor = '#28a745';
        uploadArea.style.backgroundColor = '#f8fff8';
        if (clearBtn) clearBtn.style.display = 'inline-block';
      } else {
        // Reset to original state
        uploadArea.classList.remove('file-selected');
        if (clearBtn) clearBtn.style.display = 'none';
        if (input.id === 'excelFileUpdate') {
          uploadText.textContent = 'Click to update Excel file';
          uploadHint.textContent = 'Replace current data with new Excel file';
          uploadIcon.className = 'fas fa-sync-alt';
        } else {
          uploadText.textContent = 'Click to select Excel file';
          uploadHint.textContent = 'Upload .xlsx or .xls file with risk assessment data';
          uploadIcon.className = 'fas fa-file-excel';
        }
        uploadArea.style.borderColor = '#dee2e6';
        uploadArea.style.backgroundColor = '#f8f9fa';
      }
    }

    // Add file validation to file inputs
    document.addEventListener('DOMContentLoaded', function() {
      const fileInputs = document.querySelectorAll('input[type="file"]');
      fileInputs.forEach(input => {
        input.addEventListener('change', function() {
          if (validateFile(this)) {
            updateFileUploadDisplay(this);
            showNotification('File selected: ' + this.files[0].name, 'success');
          }
        });
      });

      // Initialize enhanced upload handling
      handleEnhancedUpload();
    });
  </script>
</body>
</html>